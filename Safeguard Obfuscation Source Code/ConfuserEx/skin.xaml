<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:local="clr-namespace:ConfuserEx">
  <DrawingBrush x:Key="WindowBackground" TileMode="Tile" Viewport="0,0,10,10" ViewportUnits="Absolute">
    <DrawingBrush.Drawing>
      <GeometryDrawing>
        <GeometryDrawing.Brush>
          <LinearGradientBrush SpreadMethod="Repeat" StartPoint="0,0" EndPoint="1,1">
            <Brush.RelativeTransform>
              <ScaleTransform ScaleX="0.5" ScaleY="0.5"/>
            </Brush.RelativeTransform>
            <GradientStop Offset="0" Color="#101010"/>
            <GradientStop Offset="0.5" Color="#101010"/>
            <GradientStop Offset="0.5" Color="#202020"/>
            <GradientStop Offset="1" Color="#202020"/>
          </LinearGradientBrush>
        </GeometryDrawing.Brush>
        <GeometryDrawing.Geometry>
          <RectangleGeometry Rect="0,0,10,10"/>
        </GeometryDrawing.Geometry>
      </GeometryDrawing>
    </DrawingBrush.Drawing>
  </DrawingBrush>
  <SolidColorBrush x:Key="ControlBackground" Color="#ff202020"/>
  <SolidColorBrush x:Key="LightBackground" Color="#ff282828"/>
  <SolidColorBrush x:Key="Border" Color="#ffa0a0a0"/>
  <SolidColorBrush x:Key="Foreground" Color="#fff0f0f0"/>
  <SolidColorBrush x:Key="DisabledBackground" Color="#ff505050"/>
  <SolidColorBrush x:Key="DisabledForeground" Color="#ff808080"/>
  <SolidColorBrush x:Key="SelectedBackground" Color="#ffa0a0a0"/>
  <SolidColorBrush x:Key="SelectedForeground" Color="#ff202020"/>
  <SolidColorBrush x:Key="HighlightBackground" Color="#ff404040"/>
  <SolidColorBrush x:Key="DownBackground" Color="#ff303030"/>
  <SolidColorBrush x:Key="HighlightOverlay" Color="#20ffffff"/>
  <ControlTemplate x:Key="WindowTemplateKey" TargetType="{x:Type Window}">
    <Border BorderBrush="{TemplateBinding Control.BorderBrush}"
            BorderThickness="{TemplateBinding Control.BorderThickness}"
            Background="{TemplateBinding Control.Background}">
      <Grid>
        <AdornerDecorator>
          <ContentPresenter/>
        </AdornerDecorator>
        <ResizeGrip x:Name="WindowResizeGrip" HorizontalAlignment="Right" IsTabStop="false" Visibility="Collapsed"
                    VerticalAlignment="Bottom"/>
      </Grid>
    </Border>
    <ControlTemplate.Triggers>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="Window.ResizeMode" Value="CanResizeWithGrip"/>
          <Condition Property="Window.WindowState" Value="Normal"/>
        </MultiTrigger.Conditions>
        <Setter TargetName="WindowResizeGrip" Property="UIElement.Visibility" Value="Visible"/>
      </MultiTrigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>
  <Style x:Key="DarkWindow" TargetType="{x:Type Window}">
    <Setter Property="Control.Background" Value="{StaticResource WindowBackground}"/>
    <Setter Property="Control.Foreground" Value="{StaticResource Foreground}"/>
    <Setter Property="Control.FontFamily" Value="Open Sans"/>
    <Setter Property="Control.FontSize" Value="12"/>
    <Setter Property="FrameworkElement.UseLayoutRounding" Value="true"/>
    <Setter Property="TextOptions.TextFormattingMode" Value="Ideal"/>
    <Setter Property="TextOptions.TextRenderingMode" Value="Grayscale"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Window}">
          <Border BorderBrush="{TemplateBinding Control.BorderBrush}"
                  BorderThickness="{TemplateBinding Control.BorderThickness}"
                  Background="{TemplateBinding Control.Background}">
            <AdornerDecorator>
              <ContentPresenter/>
            </AdornerDecorator>
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Style.Triggers>
      <Trigger Property="Window.ResizeMode" Value="CanResizeWithGrip">
        <Setter Property="Control.Template" Value="{StaticResource WindowTemplateKey}"/>
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style TargetType="{x:Type Label}">
    <Setter Property="Control.Foreground" Value="{StaticResource Foreground}"/>
    <Setter Property="Control.HorizontalContentAlignment" Value="Left"/>
    <Setter Property="Control.VerticalContentAlignment" Value="Top"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Label}">
          <Border Padding="{TemplateBinding Control.Padding}">
            <ContentPresenter HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}"
                              VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}" RecognizesAccessKey="true"/>
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="UIElement.IsEnabled" Value="false">
              <Setter Value="{StaticResource DisabledForeground}" Property="Control.Foreground"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="ToolBarVerticalOverflowButtonStyle" TargetType="{x:Type ToggleButton}">
    <Setter Property="Control.Background" Value="Transparent"/>
    <Setter Property="FrameworkElement.MinHeight" Value="0"/>
    <Setter Property="FrameworkElement.MinWidth" Value="0"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ToggleButton}">
          <Border x:Name="Bd" Background="{TemplateBinding Control.Background}" SnapsToDevicePixels="true"
                  BorderThickness="1">
            <Canvas HorizontalAlignment="Right" Height="6" Margin="2,7,2,2" SnapsToDevicePixels="true"
                    VerticalAlignment="Bottom" Width="7">
              <Path Data="M 1.5,1 L 1.5,6 " Stroke="White"/>
              <Path Data="M 0.5,0 L 0.5,5 " Stroke="{TemplateBinding Control.Foreground}"/>
              <Path Data="M 3.5,0.5 L 7,3.5 4,6.5 Z" Fill="White"/>
              <Path Data="M 3,-0.5 L 6,2.5 3,5.5 Z" Fill="{TemplateBinding Control.Foreground}"/>
            </Canvas>
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="UIElement.IsMouseOver" Value="true">
              <Setter TargetName="Bd" Value="{StaticResource HighlightBackground}" Property="Border.Background"/>
              <Setter TargetName="Bd" Value="{StaticResource Border}" Property="Border.BorderBrush"/>
            </Trigger>
            <Trigger Property="UIElement.IsKeyboardFocused" Value="true">
              <Setter TargetName="Bd" Value="{StaticResource HighlightBackground}" Property="Border.Background"/>
              <Setter TargetName="Bd" Value="{StaticResource Border}" Property="Border.BorderBrush"/>
            </Trigger>
            <Trigger Property="UIElement.IsEnabled" Value="false">
              <Setter Value="{StaticResource DisabledForeground}" Property="Control.Foreground"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="ToolBarHorizontalOverflowButtonStyle" TargetType="{x:Type ToggleButton}">
    <Setter Property="Control.Background" Value="Transparent"/>
    <Setter Property="FrameworkElement.MinHeight" Value="0"/>
    <Setter Property="FrameworkElement.MinWidth" Value="0"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ToggleButton}">
          <Border x:Name="Bd" Background="{TemplateBinding Control.Background}" CornerRadius="0,3,3,0"
                  SnapsToDevicePixels="true">
            <Canvas HorizontalAlignment="Right" Height="7" Margin="7,2,2,2" SnapsToDevicePixels="true"
                    VerticalAlignment="Bottom" Width="6">
              <Path Data="M 1.5,1.5 L 6,1.5 " Stroke="{TemplateBinding Control.Foreground}"/>
              <Path Data="M 0.5,4 L 6.5,4 3.5,7 Z" Fill="{TemplateBinding Control.Foreground}"/>
            </Canvas>
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="UIElement.IsMouseOver" Value="true">
              <Setter TargetName="Bd" Value="{StaticResource HighlightBackground}" Property="Border.Background"/>
              <Setter TargetName="Bd" Value="{StaticResource Border}" Property="Border.BorderBrush"/>
            </Trigger>
            <Trigger Property="UIElement.IsKeyboardFocused" Value="true">
              <Setter TargetName="Bd" Value="{StaticResource HighlightBackground}" Property="Border.Background"/>
              <Setter TargetName="Bd" Value="{StaticResource Border}" Property="Border.BorderBrush"/>
            </Trigger>
            <Trigger Property="UIElement.IsEnabled" Value="false">
              <Setter Value="{StaticResource DisabledForeground}" Property="Control.Foreground"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="ToolBarThumbStyle" TargetType="{x:Type Thumb}">
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Thumb}">
          <Border Background="Transparent" Padding="{TemplateBinding Control.Padding}" SnapsToDevicePixels="true">
            <Rectangle>
              <Shape.Fill>
                <DrawingBrush TileMode="Tile" Viewbox="0,0,4,4" Viewport="0,0,4,4" ViewportUnits="Absolute"
                              ViewboxUnits="Absolute">
                  <DrawingBrush.Drawing>
                    <DrawingGroup>
                      <GeometryDrawing Brush="{StaticResource Foreground}" Geometry="M 0,0 L 0,2 2,2 2,0 Z"/>
                    </DrawingGroup>
                  </DrawingBrush.Drawing>
                </DrawingBrush>
              </Shape.Fill>
            </Rectangle>
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="UIElement.IsMouseOver" Value="true">
              <Setter Property="FrameworkElement.Cursor" Value="SizeAll"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style TargetType="{x:Type ToolBar}">
    <Setter Property="Control.Background" Value="{StaticResource ControlBackground}"/>
    <Setter Property="Control.Foreground" Value="{StaticResource Foreground}"/>
    <Setter Property="Control.BorderBrush" Value="{StaticResource Border}"/>
    <Setter Property="Control.BorderThickness" Value="0,0,0,1"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ToolBar}">
          <Grid x:Name="Grid" SnapsToDevicePixels="true">
            <Border x:Name="MainPanelBorder" BorderBrush="{TemplateBinding Control.BorderBrush}"
                    BorderThickness="{TemplateBinding Control.BorderThickness}"
                    Background="{TemplateBinding Control.Background}" Padding="{TemplateBinding Control.Padding}">
              <DockPanel KeyboardNavigation.TabIndex="1" KeyboardNavigation.TabNavigation="Local">
                <Thumb x:Name="ToolBarThumb" Margin="-3,-1,0,0" Padding="6,5,1,6"
                       Style="{StaticResource ToolBarThumbStyle}" Width="10"/>
                <ContentPresenter x:Name="ToolBarHeader" ContentSource="Header" HorizontalAlignment="Center" Margin="4,0,4,0"
                                  SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}" VerticalAlignment="Center"/>
                <ToolBarPanel x:Name="PART_ToolBarPanel" IsItemsHost="true" Margin="2"
                              SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"/>
                <Grid x:Name="OverflowGrid" DockPanel.Dock="Right" Margin="2,2,3,2">
                  <ToggleButton x:Name="OverflowButton" ClickMode="Press" IsEnabled="{TemplateBinding ToolBar.HasOverflowItems}"
                                Style="{StaticResource ToolBarHorizontalOverflowButtonStyle}" FocusVisualStyle="{x:Null}"
                                IsChecked="{Binding IsOverflowOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"/>
                  <Popup x:Name="OverflowPopup" AllowsTransparency="true" Focusable="false"
                         PopupAnimation="{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}"
                         Placement="Bottom" StaysOpen="false"
                         IsOpen="{Binding IsOverflowOpen, RelativeSource={RelativeSource TemplatedParent}}">
                    <Border BorderBrush="{StaticResource Border}" BorderThickness="1"
                            Background="{StaticResource LightBackground}">
                      <ToolBarOverflowPanel x:Name="PART_ToolBarOverflowPanel" KeyboardNavigation.DirectionalNavigation="Cycle"
                                            Focusable="true" Margin="2" SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"
                                            KeyboardNavigation.TabNavigation="Cycle" WrapWidth="200" FocusVisualStyle="{x:Null}"/>
                    </Border>
                  </Popup>
                </Grid>
              </DockPanel>
            </Border>
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="ToolBar.IsOverflowOpen" Value="true">
              <Setter TargetName="ToolBarThumb" Property="UIElement.IsEnabled" Value="false"/>
            </Trigger>
            <Trigger Value="{x:Null}" Property="HeaderedItemsControl.Header">
              <Setter TargetName="ToolBarHeader" Property="UIElement.Visibility" Value="Collapsed"/>
            </Trigger>
            <Trigger Property="ToolBarTray.IsLocked" Value="true">
              <Setter TargetName="ToolBarThumb" Property="UIElement.Visibility" Value="Collapsed"/>
            </Trigger>
            <Trigger Property="ToolBar.OverflowMode" Value="Never">
              <Setter TargetName="OverflowGrid" Property="UIElement.Visibility" Value="Collapsed"/>
            </Trigger>
            <Trigger Property="ToolBar.Orientation" Value="Vertical">
              <Setter TargetName="Grid" Property="FrameworkElement.Margin" Value="1,3,1,1"/>
              <Setter TargetName="OverflowButton" Value="{StaticResource ToolBarVerticalOverflowButtonStyle}"
                      Property="FrameworkElement.Style"/>
              <Setter TargetName="ToolBarThumb" Property="FrameworkElement.Height" Value="10"/>
              <Setter TargetName="ToolBarThumb" Property="FrameworkElement.Width" Value="Auto"/>
              <Setter TargetName="ToolBarThumb" Property="FrameworkElement.Margin" Value="-1,-3,0,0"/>
              <Setter TargetName="ToolBarThumb" Property="Control.Padding" Value="5,6,6,1"/>
              <Setter TargetName="ToolBarHeader" Property="FrameworkElement.Margin" Value="0,0,0,4"/>
              <Setter TargetName="PART_ToolBarPanel" Property="FrameworkElement.Margin" Value="1,0,2,2"/>
              <Setter TargetName="ToolBarThumb" Property="DockPanel.Dock" Value="Top"/>
              <Setter TargetName="ToolBarHeader" Property="DockPanel.Dock" Value="Top"/>
              <Setter TargetName="OverflowGrid" Property="FrameworkElement.HorizontalAlignment" Value="Stretch"/>
              <Setter TargetName="OverflowGrid" Property="FrameworkElement.VerticalAlignment" Value="Bottom"/>
              <Setter TargetName="OverflowPopup" Property="Popup.Placement" Value="Right"/>
              <Setter TargetName="MainPanelBorder" Property="FrameworkElement.Margin" Value="0,0,0,11"/>
            </Trigger>
            <Trigger Property="UIElement.IsEnabled" Value="false">
              <Setter Value="{StaticResource DisabledForeground}" Property="Control.Foreground"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="{x:Static ToolBar.ButtonStyleKey}" TargetType="{x:Type Button}">
    <Setter Property="Control.Foreground" Value="{StaticResource Foreground}"/>
    <Setter Property="Control.BorderThickness" Value="1"/>
    <Setter Property="Control.Padding" Value="4"/>
    <Setter Property="FrameworkElement.Margin" Value="2"/>
    <Setter Property="Control.Background" Value="Transparent"/>
    <Setter Property="Control.BorderBrush" Value="Transparent"/>
    <Setter Property="FrameworkElement.HorizontalAlignment" Value="Center"/>
    <Setter Property="FrameworkElement.VerticalAlignment" Value="Center"/>
    <Setter Property="Control.HorizontalContentAlignment" Value="Center"/>
    <Setter Property="Control.VerticalContentAlignment" Value="Center"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Button}">
          <Border x:Name="Bd" BorderBrush="{TemplateBinding Control.BorderBrush}"
                  BorderThickness="{TemplateBinding Control.BorderThickness}"
                  Background="{TemplateBinding Control.Background}" Padding="{TemplateBinding Control.Padding}"
                  SnapsToDevicePixels="true">
            <ContentPresenter HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}"
                              SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"
                              VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}"/>
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="UIElement.IsMouseOver" Value="true">
              <Setter TargetName="Bd" Value="{StaticResource HighlightBackground}" Property="Border.Background"/>
              <Setter TargetName="Bd" Value="{StaticResource Border}" Property="Border.BorderBrush"/>
            </Trigger>
            <Trigger Property="UIElement.IsKeyboardFocused" Value="true">
              <Setter TargetName="Bd" Value="{StaticResource HighlightBackground}" Property="Border.Background"/>
              <Setter TargetName="Bd" Value="{StaticResource Border}" Property="Border.BorderBrush"/>
            </Trigger>
            <Trigger Property="ButtonBase.IsPressed" Value="true">
              <Setter TargetName="Bd" Value="{StaticResource DownBackground}" Property="Border.Background"/>
              <Setter TargetName="Bd" Value="{StaticResource Border}" Property="Border.BorderBrush"/>
            </Trigger>
            <Trigger Property="UIElement.IsEnabled" Value="false">
              <Setter Value="{StaticResource DisabledForeground}" Property="Control.Foreground"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style TargetType="{x:Type TabControl}">
    <Setter Property="Control.Foreground" Value="{StaticResource Foreground}"/>
    <Setter Property="Control.Background" Value="{StaticResource ControlBackground}"/>
    <Setter Property="Control.BorderBrush" Value="{StaticResource Border}"/>
    <Setter Property="Control.BorderThickness" Value="1"/>
    <Setter Property="FrameworkElement.Margin" Value="0"/>
    <Setter Property="Control.Padding" Value="1"/>
    <Setter Property="FrameworkElement.MinWidth" Value="10"/>
    <Setter Property="FrameworkElement.MinHeight" Value="10"/>
    <Setter Property="Control.HorizontalContentAlignment" Value="Center"/>
    <Setter Property="Control.VerticalContentAlignment" Value="Center"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type TabControl}">
          <Grid ClipToBounds="true" SnapsToDevicePixels="true" KeyboardNavigation.TabNavigation="Local">
            <Grid.ColumnDefinitions>
              <ColumnDefinition x:Name="ColumnDefinition0"/>
              <ColumnDefinition x:Name="ColumnDefinition1" Width="0"/>
            </Grid.ColumnDefinitions>
            <Grid.RowDefinitions>
              <RowDefinition x:Name="RowDefinition0" Height="Auto"/>
              <RowDefinition x:Name="RowDefinition1" Height="*"/>
            </Grid.RowDefinitions>
            <TabPanel x:Name="HeaderPanel" Background="Transparent" Grid.Column="0" IsItemsHost="true" Margin="0,2,2,-1"
                      Grid.Row="0" KeyboardNavigation.TabIndex="1" ZIndex="1"
                      IsEnabled="{Binding Path=(local:Skin.TabsDisabled), RelativeSource={RelativeSource TemplatedParent}, Converter={x:Static local:InvertBoolConverter.Instance}}"/>
            <Grid x:Name="ContentPanel" Column="0" KeyboardNavigation.DirectionalNavigation="Contained" Row="1"
                  KeyboardNavigation.TabIndex="2" KeyboardNavigation.TabNavigation="Local">
              <Border BorderBrush="{TemplateBinding Control.BorderBrush}"
                      BorderThickness="{TemplateBinding Control.BorderThickness}"
                      Background="{TemplateBinding Control.Background}" Padding="{TemplateBinding Control.Padding}">
                <ContentPresenter x:Name="PART_SelectedContentHost" ContentSource="SelectedContent" Margin="2,2,2,2"
                                  SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"/>
              </Border>
            </Grid>
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="TabControl.TabStripPlacement" Value="Bottom">
              <Setter TargetName="HeaderPanel" Property="Grid.Row" Value="1"/>
              <Setter TargetName="ContentPanel" Property="Grid.Row" Value="0"/>
              <Setter TargetName="RowDefinition0" Property="RowDefinition.Height" Value="*"/>
              <Setter TargetName="RowDefinition1" Property="RowDefinition.Height" Value="Auto"/>
              <Setter TargetName="HeaderPanel" Property="FrameworkElement.Margin" Value="2,0,2,2"/>
            </Trigger>
            <Trigger Property="TabControl.TabStripPlacement" Value="Left">
              <Setter TargetName="HeaderPanel" Property="Grid.Row" Value="0"/>
              <Setter TargetName="ContentPanel" Property="Grid.Row" Value="0"/>
              <Setter TargetName="HeaderPanel" Property="Grid.Column" Value="0"/>
              <Setter TargetName="ContentPanel" Property="Grid.Column" Value="1"/>
              <Setter TargetName="ColumnDefinition0" Property="ColumnDefinition.Width" Value="Auto"/>
              <Setter TargetName="ColumnDefinition1" Property="ColumnDefinition.Width" Value="*"/>
              <Setter TargetName="RowDefinition0" Property="RowDefinition.Height" Value="*"/>
              <Setter TargetName="RowDefinition1" Property="RowDefinition.Height" Value="0"/>
              <Setter TargetName="HeaderPanel" Property="FrameworkElement.Margin" Value="2,2,0,2"/>
            </Trigger>
            <Trigger Property="TabControl.TabStripPlacement" Value="Right">
              <Setter TargetName="HeaderPanel" Property="Grid.Row" Value="0"/>
              <Setter TargetName="ContentPanel" Property="Grid.Row" Value="0"/>
              <Setter TargetName="HeaderPanel" Property="Grid.Column" Value="1"/>
              <Setter TargetName="ContentPanel" Property="Grid.Column" Value="0"/>
              <Setter TargetName="ColumnDefinition0" Property="ColumnDefinition.Width" Value="*"/>
              <Setter TargetName="ColumnDefinition1" Property="ColumnDefinition.Width" Value="Auto"/>
              <Setter TargetName="RowDefinition0" Property="RowDefinition.Height" Value="*"/>
              <Setter TargetName="RowDefinition1" Property="RowDefinition.Height" Value="0"/>
              <Setter TargetName="HeaderPanel" Property="FrameworkElement.Margin" Value="0,2,2,2"/>
            </Trigger>
            <Trigger Property="UIElement.IsEnabled" Value="false">
              <Setter Value="{StaticResource DisabledForeground}" Property="Control.Foreground"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="TabItemFocusVisual">
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate>
          <Rectangle Margin="4,4,4,2" SnapsToDevicePixels="true" Stroke="{StaticResource Border}" StrokeThickness="1"
                     StrokeDashArray="1 2"/>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style TargetType="{x:Type TabItem}">
    <Setter Property="FrameworkElement.FocusVisualStyle" Value="{StaticResource TabItemFocusVisual}"/>
    <Setter Property="Control.Padding" Value="15,6,15,6"/>
    <Setter Property="Control.Foreground" Value="{StaticResource Foreground}"/>
    <Setter Property="Control.BorderBrush" Value="{StaticResource Border}"/>
    <Setter Property="Control.Background" Value="{StaticResource ControlBackground}"/>
    <Setter Property="Control.HorizontalContentAlignment" Value="Stretch"/>
    <Setter Property="Control.VerticalContentAlignment" Value="Stretch"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type TabItem}">
          <Grid x:Name="Grid" Margin="0,0,-1,0">
            <Border x:Name="Border" BorderBrush="{TemplateBinding Control.BorderBrush}" BorderThickness="1,1,1,0"
                    Background="{TemplateBinding Control.Background}" SnapsToDevicePixels="true">
              <ContentPresenter ContentSource="Header" Margin="{TemplateBinding Control.Padding}" RecognizesAccessKey="true"
                                SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"
                                HorizontalAlignment="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"
                                VerticalAlignment="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
            </Border>
            <Border x:Name="Overlay" Background="{StaticResource HighlightOverlay}" Opacity="0"/>
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="TabItem.IsSelected" Value="true">
              <Setter Property="Panel.ZIndex" Value="1"/>
            </Trigger>
            <Trigger Property="TabItem.TabStripPlacement" Value="Bottom">
              <Setter TargetName="Border" Property="Border.BorderThickness" Value="1,0,1,1"/>
            </Trigger>
            <Trigger Property="TabItem.TabStripPlacement" Value="Left">
              <Setter TargetName="Border" Property="Border.BorderThickness" Value="1,1,0,1"/>
              <Setter TargetName="Grid" Property="FrameworkElement.Margin" Value="0,0,0,-1"/>
            </Trigger>
            <Trigger Property="TabItem.TabStripPlacement" Value="Right">
              <Setter TargetName="Border" Property="Border.BorderThickness" Value="0,1,1,1"/>
              <Setter TargetName="Grid" Property="FrameworkElement.Margin" Value="0,0,0,-1"/>
            </Trigger>
            <Trigger Property="TabItem.IsSelected" Value="false">
              <Setter TargetName="Border" Property="Border.Background" Value="Transparent"/>
            </Trigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="UIElement.IsMouseOver" Value="false"/>
                <Condition Property="TabItem.IsSelected" Value="false"/>
              </MultiTrigger.Conditions>
              <Setter TargetName="Border" Property="Border.BorderBrush" Value="Transparent"/>
            </MultiTrigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="UIElement.IsMouseOver" Value="true"/>
                <Condition Property="TabItem.IsSelected" Value="false"/>
              </MultiTrigger.Conditions>
              <Setter TargetName="Overlay" Property="UIElement.Opacity" Value="1"/>
            </MultiTrigger>
            <Trigger Property="UIElement.IsEnabled" Value="false">
              <Setter Value="{StaticResource DisabledForeground}" Property="Control.Foreground"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <PopupAnimation x:Key="{x:Static SystemParameters.MenuPopupAnimationKey}">None</PopupAnimation>
  <Style TargetType="{x:Type ContextMenu}">
    <Setter Property="Control.Background" Value="{StaticResource ControlBackground}"/>
    <Setter Property="Control.BorderThickness" Value="1"/>
    <Setter Property="Control.BorderBrush" Value="{StaticResource Border}"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ContextMenu}">
          <Border Background="Transparent" Padding="5">
            <UIElement.Effect>
              <DropShadowEffect BlurRadius="4" Opacity="0.8" ShadowDepth="1"/>
            </UIElement.Effect>
            <Border BorderBrush="{TemplateBinding Control.BorderBrush}"
                    BorderThickness="{TemplateBinding Control.BorderThickness}"
                    Background="{TemplateBinding Control.Background}">
              <ScrollViewer CanContentScroll="true"
                            Style="{DynamicResource {ComponentResourceKey ResourceId=MenuScrollViewer, TypeInTargetAssembly={x:Type FrameworkElement}}}">
                <ItemsPresenter KeyboardNavigation.DirectionalNavigation="Cycle" Margin="{TemplateBinding Control.Padding}"
                                SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"/>
              </ScrollViewer>
            </Border>
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <ControlTemplate x:Key="{x:Static MenuItem.SubmenuItemTemplateKey}" TargetType="{x:Type MenuItem}">
    <Border x:Name="Border" Padding="{TemplateBinding Control.Padding}" Background="Transparent">
      <Grid>
        <Grid.ColumnDefinitions>
          <ColumnDefinition Width="Auto" SharedSizeGroup="Icon"/>
          <ColumnDefinition Width="*"/>
          <ColumnDefinition Width="Auto" SharedSizeGroup="Shortcut"/>
          <ColumnDefinition Width="13"/>
        </Grid.ColumnDefinitions>
        <ContentPresenter x:Name="Icon" Margin="6,0,6,0" VerticalAlignment="Center" ContentSource="Icon"/>
        <Border x:Name="Check" Width="13" Height="13" Visibility="Collapsed" Margin="6,0,6,0"
                Background="Transparent">
          <Path x:Name="CheckMark" Width="7" Height="7" Visibility="Hidden" SnapsToDevicePixels="false"
                Stroke="{StaticResource Foreground}" StrokeThickness="2" Data="M 0,0 L 7,7 M 0,7 L 7,0 "/>
        </Border>
        <ContentPresenter x:Name="HeaderHost" Grid.Column="1" ContentSource="Header" VerticalAlignment="Center"
                          RecognizesAccessKey="true"/>
        <TextBlock x:Name="InputGestureText" Grid.Column="2" Text="{TemplateBinding MenuItem.InputGestureText}"
                   VerticalAlignment="Center" Margin="10,0,0,0"/>
      </Grid>
    </Border>
    <ControlTemplate.Triggers>
      <Trigger Value="{x:Null}" Property="MenuItem.Icon">
        <Setter TargetName="Icon" Property="UIElement.Visibility" Value="Hidden"/>
      </Trigger>
      <Trigger Property="MenuItem.IsChecked" Value="true">
        <Setter TargetName="CheckMark" Property="UIElement.Visibility" Value="Visible"/>
      </Trigger>
      <Trigger Property="MenuItem.IsCheckable" Value="true">
        <Setter TargetName="Check" Property="UIElement.Visibility" Value="Visible"/>
        <Setter TargetName="Icon" Property="UIElement.Visibility" Value="Hidden"/>
      </Trigger>
      <Trigger Property="MenuItem.IsHighlighted" Value="true">
        <Setter TargetName="Border" Value="{StaticResource HighlightBackground}" Property="Border.Background"/>
      </Trigger>
      <Trigger Property="UIElement.IsEnabled" Value="false">
        <Setter Value="{StaticResource DisabledForeground}" Property="Control.Foreground"/>
      </Trigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>
  <Style TargetType="{x:Type MenuItem}">
    <Setter Property="Control.Foreground" Value="{StaticResource Foreground}"/>
    <Setter Property="Control.Background" Value="{StaticResource ControlBackground}"/>
    <Setter Property="Control.Padding" Value="5,4,5,4"/>
    <Style.Triggers>
      <Trigger Property="MenuItem.Role" Value="SubmenuItem">
        <Setter Property="Control.Template" Value="{StaticResource {x:Static MenuItem.SubmenuItemTemplateKey}}"/>
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="{x:Static MenuItem.SeparatorStyleKey}" TargetType="{x:Type Separator}">
    <Setter Property="Control.Background" Value="{StaticResource Border}"/>
    <Setter Property="FrameworkElement.Margin" Value="2"/>
    <Setter Property="UIElement.Focusable" Value="false"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Separator}">
          <Border BorderBrush="{TemplateBinding Control.BorderBrush}"
                  BorderThickness="{TemplateBinding Control.BorderThickness}"
                  Background="{TemplateBinding Control.Background}" Height="1" SnapsToDevicePixels="true"/>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style TargetType="{x:Type Separator}">
    <Setter Property="Control.Background" Value="{StaticResource Border}"/>
    <Setter Property="FrameworkElement.Margin" Value="2"/>
    <Setter Property="UIElement.Focusable" Value="false"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Separator}">
          <Border BorderBrush="{TemplateBinding Control.BorderBrush}"
                  BorderThickness="{TemplateBinding Control.BorderThickness}"
                  Background="{TemplateBinding Control.Background}" Height="1" SnapsToDevicePixels="true"/>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="ButtonFocusVisual">
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate>
          <Border>
            <Rectangle Margin="4" SnapsToDevicePixels="true" Stroke="{StaticResource Border}" StrokeThickness="1"
                       StrokeDashArray="1 2"/>
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style TargetType="{x:Type Button}">
    <Setter Property="FrameworkElement.FocusVisualStyle" Value="{StaticResource ButtonFocusVisual}"/>
    <Setter Property="Control.Background" Value="{StaticResource ControlBackground}"/>
    <Setter Property="Control.Foreground" Value="{StaticResource Foreground}"/>
    <Setter Property="Control.BorderBrush" Value="{StaticResource Border}"/>
    <Setter Property="Control.Padding" Value="0"/>
    <Setter Property="Control.HorizontalContentAlignment" Value="Center"/>
    <Setter Property="Control.VerticalContentAlignment" Value="Center"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Button}">
          <Border x:Name="ContentContainer" BorderBrush="{TemplateBinding Control.BorderBrush}" BorderThickness="1"
                  Background="{TemplateBinding Control.Background}" SnapsToDevicePixels="true">
            <Grid>
              <ContentPresenter HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}"
                                Margin="{TemplateBinding Control.Padding}" RecognizesAccessKey="true"
                                SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"
                                VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}"/>
              <Border x:Name="Overlay" Background="{StaticResource HighlightOverlay}" Opacity="0"/>
            </Grid>
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="Button.IsDefaulted" Value="true">
              <Setter TargetName="ContentContainer" Property="Border.BorderThickness" Value="2"/>
            </Trigger>
            <Trigger Property="UIElement.IsMouseOver" Value="true">
              <Setter TargetName="Overlay" Property="UIElement.Opacity" Value="1"/>
            </Trigger>
            <Trigger Property="ButtonBase.IsPressed" Value="true">
              <Setter TargetName="Overlay" Property="UIElement.Opacity" Value="0.7"/>
            </Trigger>
            <Trigger Property="ToggleButton.IsChecked" Value="true">
              <Setter TargetName="Overlay" Property="UIElement.Opacity" Value="1"/>
            </Trigger>
            <Trigger Property="UIElement.IsEnabled" Value="false">
              <Setter Value="{StaticResource DisabledForeground}" Property="Control.Foreground"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style TargetType="{x:Type TextBox}">
    <Setter Property="Control.BorderBrush" Value="{StaticResource Border}"/>
    <Setter Property="Control.BorderThickness" Value="1"/>
    <Setter Property="Control.Foreground" Value="{StaticResource Foreground}"/>
    <Setter Property="Control.Background" Value="{StaticResource ControlBackground}"/>
    <Setter Property="Control.Padding" Value="1"/>
    <Setter Property="KeyboardNavigation.TabNavigation" Value="None"/>
    <Setter Property="Control.HorizontalContentAlignment" Value="Left"/>
    <Setter Property="FrameworkElement.FocusVisualStyle" Value="{x:Null}"/>
    <Setter Property="UIElement.AllowDrop" Value="true"/>
    <Setter Property="ScrollViewer.PanningMode" Value="VerticalFirst"/>
    <Setter Property="Stylus.IsFlicksEnabled" Value="false"/>
    <Setter Property="TextBoxBase.SelectionBrush" Value="{StaticResource Foreground}"/>
    <Setter Property="TextBoxBase.SelectionOpacity" Value="0.2"/>
    <Setter Property="TextBoxBase.CaretBrush" Value="{StaticResource Border}"/>
    <Setter Property="FrameworkElement.ContextMenu">
      <Setter.Value>
        <ContextMenu>
          <MenuItem Header="Undo" Command="ApplicationCommands.Undo"/>
          <MenuItem Header="Redo" Command="ApplicationCommands.Redo"/>
          <Separator/>
          <MenuItem Header="Cut" Command="ApplicationCommands.Cut"/>
          <MenuItem Header="Copy" Command="ApplicationCommands.Copy"/>
          <MenuItem Header="Paste" Command="ApplicationCommands.Paste"/>
        </ContextMenu>
      </Setter.Value>
    </Setter>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type TextBox}">
          <Border x:Name="Bd" BorderBrush="{TemplateBinding Control.BorderBrush}"
                  BorderThickness="{TemplateBinding Control.BorderThickness}"
                  Background="{TemplateBinding Control.Background}">
            <Grid>
              <Border x:Name="Overlay" Background="{StaticResource HighlightOverlay}" Opacity="0"/>
              <ScrollViewer x:Name="PART_ContentHost"/>
              <Label x:Name="Prompt" Opacity="0" IsHitTestVisible="false"
                     VerticalContentAlignment="{TemplateBinding Control.VerticalContentAlignment}"
                     HorizontalContentAlignment="{TemplateBinding Control.HorizontalContentAlignment}"
                     Content="{Binding Path=(local:Skin.EmptyPrompt), RelativeSource={RelativeSource TemplatedParent}}"/>
            </Grid>
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="UIElement.IsEnabled" Value="false">
              <Setter TargetName="Bd" Value="{StaticResource DisabledBackground}" Property="Border.Background"/>
              <Setter Value="{StaticResource DisabledForeground}" Property="Control.Foreground"/>
            </Trigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="UIElement.IsFocused" Value="true"/>
                <Condition Property="local:Skin.FocusOverlay" Value="true"/>
              </MultiTrigger.Conditions>
              <Setter TargetName="Overlay" Property="UIElement.Opacity" Value="0.5"/>
            </MultiTrigger>
            <Trigger Property="TextBox.Text" Value="">
              <Setter TargetName="Prompt" Property="UIElement.Opacity" Value="0.5"/>
            </Trigger>
            <Trigger Value="{x:Null}" Property="TextBox.Text">
              <Setter TargetName="Prompt" Property="UIElement.Opacity" Value="0.5"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style TargetType="{x:Type RichTextBox}">
    <Setter Property="Control.BorderBrush" Value="{StaticResource Border}"/>
    <Setter Property="Control.BorderThickness" Value="1"/>
    <Setter Property="Control.Foreground" Value="{StaticResource Foreground}"/>
    <Setter Property="Control.Background" Value="{StaticResource ControlBackground}"/>
    <Setter Property="Control.Padding" Value="1"/>
    <Setter Property="KeyboardNavigation.TabNavigation" Value="None"/>
    <Setter Property="Control.HorizontalContentAlignment" Value="Left"/>
    <Setter Property="FrameworkElement.FocusVisualStyle" Value="{x:Null}"/>
    <Setter Property="UIElement.AllowDrop" Value="true"/>
    <Setter Property="ScrollViewer.PanningMode" Value="VerticalFirst"/>
    <Setter Property="Stylus.IsFlicksEnabled" Value="false"/>
    <Setter Property="TextBoxBase.SelectionBrush" Value="{StaticResource Foreground}"/>
    <Setter Property="TextBoxBase.SelectionOpacity" Value="0.2"/>
    <Setter Property="TextBoxBase.CaretBrush" Value="{StaticResource Border}"/>
    <Setter Property="FrameworkElement.ContextMenu">
      <Setter.Value>
        <ContextMenu>
          <MenuItem Header="Undo" Command="ApplicationCommands.Undo"/>
          <MenuItem Header="Redo" Command="ApplicationCommands.Redo"/>
          <Separator/>
          <MenuItem Header="Cut" Command="ApplicationCommands.Cut"/>
          <MenuItem Header="Copy" Command="ApplicationCommands.Copy"/>
          <MenuItem Header="Paste" Command="ApplicationCommands.Paste"/>
        </ContextMenu>
      </Setter.Value>
    </Setter>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type RichTextBox}">
          <Border x:Name="Bd" BorderBrush="{TemplateBinding Control.BorderBrush}"
                  BorderThickness="{TemplateBinding Control.BorderThickness}"
                  Background="{TemplateBinding Control.Background}">
            <Grid>
              <Border x:Name="Overlay" Background="{StaticResource HighlightOverlay}" Opacity="0"/>
              <ScrollViewer x:Name="PART_ContentHost"/>
            </Grid>
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="UIElement.IsEnabled" Value="false">
              <Setter TargetName="Bd" Value="{StaticResource DisabledBackground}" Property="Border.Background"/>
              <Setter Value="{StaticResource DisabledForeground}" Property="Control.Foreground"/>
            </Trigger>
            <Trigger Property="UIElement.IsFocused" Value="true">
              <Setter TargetName="Overlay" Property="UIElement.Opacity" Value="0.5"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="CheckRadioFocusVisual">
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate>
          <Rectangle Margin="14,0,0,0" SnapsToDevicePixels="true" Stroke="{StaticResource Border}" StrokeThickness="1"
                     StrokeDashArray="1 2"/>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="EmptyCheckBoxFocusVisual">
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate>
          <Rectangle Margin="1" SnapsToDevicePixels="true" Stroke="{StaticResource Border}" StrokeThickness="1"
                     StrokeDashArray="1 2"/>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style TargetType="{x:Type CheckBox}">
    <Setter Property="FrameworkElement.FocusVisualStyle" Value="{StaticResource CheckRadioFocusVisual}"/>
    <Setter Property="Control.Foreground" Value="{StaticResource Foreground}"/>
    <Setter Property="Control.Background" Value="{StaticResource LightBackground}"/>
    <Setter Property="Control.BorderBrush" Value="{StaticResource Border}"/>
    <Setter Property="Control.BorderThickness" Value="1"/>
    <Setter Property="Control.Padding" Value="5,0,0,0"/>
    <Setter Property="FrameworkElement.FocusVisualStyle" Value="{StaticResource EmptyCheckBoxFocusVisual}"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type CheckBox}">
          <BulletDecorator Background="Transparent" SnapsToDevicePixels="true">
            <BulletDecorator.Bullet>
              <Border x:Name="CheckMarkBorder" BorderBrush="{TemplateBinding Control.BorderBrush}"
                      BorderThickness="{TemplateBinding Control.BorderThickness}"
                      Background="{TemplateBinding Control.Background}">
                <Rectangle x:Name="CheckMark" Fill="{TemplateBinding Control.Foreground}" FlowDirection="LeftToRight"
                           Height="9" Margin="2" Width="9"/>
              </Border>
            </BulletDecorator.Bullet>
            <ContentPresenter HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}"
                              Margin="{TemplateBinding Control.Padding}" RecognizesAccessKey="true"
                              SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"
                              VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}"/>
          </BulletDecorator>
          <ControlTemplate.Triggers>
            <Trigger Property="ToggleButton.IsChecked" Value="false">
              <Setter TargetName="CheckMark" Property="UIElement.Visibility" Value="Hidden"/>
            </Trigger>
            <Trigger Value="{x:Null}" Property="ToggleButton.IsChecked">
              <Setter TargetName="CheckMark" Value="{StaticResource DisabledForeground}" Property="Shape.Fill"/>
            </Trigger>
            <Trigger Property="UIElement.IsMouseOver" Value="true">
              <Setter TargetName="CheckMarkBorder" Value="{StaticResource HighlightBackground}"
                      Property="Border.Background"/>
            </Trigger>
            <Trigger Property="UIElement.IsEnabled" Value="false">
              <Setter TargetName="CheckMarkBorder" Value="{StaticResource DisabledBackground}"
                      Property="Border.Background"/>
              <Setter TargetName="CheckMark" Value="{StaticResource DisabledForeground}" Property="Shape.Fill"/>
              <Setter Value="{StaticResource DisabledForeground}" Property="Control.Foreground"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style TargetType="{x:Type RadioButton}">
    <Setter Property="FrameworkElement.FocusVisualStyle" Value="{StaticResource CheckRadioFocusVisual}"/>
    <Setter Property="Control.Foreground" Value="{StaticResource Foreground}"/>
    <Setter Property="Control.Background" Value="{StaticResource LightBackground}"/>
    <Setter Property="Control.BorderBrush" Value="{StaticResource Border}"/>
    <Setter Property="Control.BorderThickness" Value="1"/>
    <Setter Property="Control.Padding" Value="5,0,0,0"/>
    <Setter Property="FrameworkElement.FocusVisualStyle" Value="{StaticResource EmptyCheckBoxFocusVisual}"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type RadioButton}">
          <BulletDecorator Background="Transparent" SnapsToDevicePixels="true">
            <BulletDecorator.Bullet>
              <Grid>
                <Ellipse x:Name="CheckMarkBorder" Stroke="{TemplateBinding Control.BorderBrush}"
                         StrokeThickness="{TemplateBinding Control.BorderThickness}"
                         Fill="{TemplateBinding Control.Background}"/>
                <Ellipse x:Name="CheckMark" Fill="{TemplateBinding Control.Foreground}" FlowDirection="LeftToRight"
                         Height="7" Margin="3" Width="7"/>
              </Grid>
            </BulletDecorator.Bullet>
            <ContentPresenter HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}"
                              Margin="{TemplateBinding Control.Padding}" RecognizesAccessKey="true"
                              SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"
                              VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}"/>
          </BulletDecorator>
          <ControlTemplate.Triggers>
            <Trigger Property="ToggleButton.IsChecked" Value="false">
              <Setter TargetName="CheckMark" Property="UIElement.Visibility" Value="Hidden"/>
            </Trigger>
            <Trigger Value="{x:Null}" Property="ToggleButton.IsChecked">
              <Setter TargetName="CheckMark" Value="{StaticResource DisabledForeground}" Property="Shape.Fill"/>
            </Trigger>
            <Trigger Property="UIElement.IsMouseOver" Value="true">
              <Setter TargetName="CheckMarkBorder" Value="{StaticResource HighlightBackground}" Property="Shape.Fill"/>
            </Trigger>
            <Trigger Property="UIElement.IsEnabled" Value="false">
              <Setter TargetName="CheckMarkBorder" Value="{StaticResource DisabledBackground}" Property="Shape.Fill"/>
              <Setter TargetName="CheckMark" Value="{StaticResource DisabledForeground}" Property="Shape.Fill"/>
              <Setter Value="{StaticResource DisabledForeground}" Property="Control.Foreground"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style TargetType="{x:Type ListBox}">
    <Setter Property="Control.Background" Value="{StaticResource ControlBackground}"/>
    <Setter Property="Control.Foreground" Value="{StaticResource Foreground}"/>
    <Setter Property="Control.BorderBrush" Value="{StaticResource Border}"/>
    <Setter Property="Control.BorderThickness" Value="1"/>
    <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto"/>
    <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto"/>
    <Setter Property="ScrollViewer.CanContentScroll" Value="true"/>
    <Setter Property="ScrollViewer.PanningMode" Value="Both"/>
    <Setter Property="Stylus.IsFlicksEnabled" Value="false"/>
    <Setter Property="Control.VerticalContentAlignment" Value="Center"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ListBox}">
          <Border x:Name="Bd" BorderBrush="{TemplateBinding Control.BorderBrush}"
                  BorderThickness="{TemplateBinding Control.BorderThickness}"
                  Background="{TemplateBinding Control.Background}" SnapsToDevicePixels="true">
            <Grid>
              <ScrollViewer Focusable="false" Padding="{TemplateBinding Control.Padding}">
                <ItemsPresenter SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"/>
              </ScrollViewer>
              <Label x:Name="Prompt" Opacity="0" IsHitTestVisible="false" VerticalContentAlignment="Center"
                     HorizontalContentAlignment="Center"
                     Content="{Binding Path=(local:Skin.EmptyPrompt), RelativeSource={RelativeSource TemplatedParent}}"/>
            </Grid>
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="UIElement.IsEnabled" Value="false">
              <Setter TargetName="Bd" Value="{DynamicResource {x:Static SystemColors.WindowBrushKey}}"
                      Property="Border.Background"/>
            </Trigger>
            <Trigger Property="ItemsControl.IsGrouping" Value="true">
              <Setter Property="ScrollViewer.CanContentScroll" Value="false"/>
            </Trigger>
            <DataTrigger Value="0" Binding="{Binding Items.Count, RelativeSource={x:Static RelativeSource.Self}}">
              <Setter TargetName="Prompt" Property="UIElement.Opacity" Value="0.5"/>
            </DataTrigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style TargetType="{x:Type ListBoxItem}">
    <Setter Property="Control.Background" Value="Transparent"/>
    <Setter Property="Control.HorizontalContentAlignment"
            Value="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
    <Setter Property="Control.VerticalContentAlignment"
            Value="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
    <Setter Property="Control.Padding" Value="5,3,5,3"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ListBoxItem}">
          <Grid>
            <Border x:Name="Bd" BorderBrush="{TemplateBinding Control.BorderBrush}"
                    BorderThickness="{TemplateBinding Control.BorderThickness}"
                    Background="{TemplateBinding Control.Background}" Padding="{TemplateBinding Control.Padding}"
                    SnapsToDevicePixels="true">
              <ContentPresenter HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}"
                                SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"
                                VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}"/>
            </Border>
            <Border x:Name="Overlay" Background="{StaticResource HighlightOverlay}" Opacity="0"
                    IsHitTestVisible="false"/>
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="ListBoxItem.IsSelected" Value="true">
              <Setter TargetName="Bd" Value="{StaticResource SelectedBackground}" Property="Border.Background"/>
              <Setter Value="{StaticResource SelectedForeground}" Property="Control.Foreground"/>
            </Trigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="UIElement.IsMouseOver" Value="true"/>
                <Condition Property="ListBoxItem.IsSelected" Value="false"/>
              </MultiTrigger.Conditions>
              <Setter TargetName="Overlay" Property="UIElement.Opacity" Value="1"/>
            </MultiTrigger>
            <Trigger Property="UIElement.IsEnabled" Value="false">
              <Setter Value="{StaticResource DisabledForeground}" Property="Control.Foreground"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style TargetType="{x:Type ScrollViewer}">
    <Setter Property="FrameworkElement.OverridesDefaultStyle" Value="true"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ScrollViewer}">
          <Grid x:Name="Grid" Background="{TemplateBinding Control.Background}">
            <Grid.ColumnDefinitions>
              <ColumnDefinition Width="*"/>
              <ColumnDefinition Width="Auto"/>
            </Grid.ColumnDefinitions>
            <Grid.RowDefinitions>
              <RowDefinition Height="*"/>
              <RowDefinition Height="Auto"/>
            </Grid.RowDefinitions>
            <Rectangle x:Name="Corner" Grid.Column="1" Fill="{StaticResource ControlBackground}" Grid.Row="1"/>
            <ScrollContentPresenter x:Name="PART_ScrollContentPresenter"
                                    CanContentScroll="{TemplateBinding ScrollViewer.CanContentScroll}" CanHorizontallyScroll="false"
                                    CanVerticallyScroll="false" ContentTemplate="{TemplateBinding ContentControl.ContentTemplate}"
                                    Content="{TemplateBinding ContentControl.Content}" Grid.Column="0"
                                    Margin="{TemplateBinding Control.Padding}" Grid.Row="0"/>
            <ScrollBar x:Name="PART_VerticalScrollBar" AutomationProperties.AutomationId="VerticalScrollBar"
                       Cursor="Arrow" Grid.Column="1" Maximum="{TemplateBinding ScrollViewer.ScrollableHeight}"
                       Minimum="0" Grid.Row="0"
                       Visibility="{TemplateBinding ScrollViewer.ComputedVerticalScrollBarVisibility}"
                       ViewportSize="{TemplateBinding ScrollViewer.ViewportHeight}"
                       Value="{Binding VerticalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}"/>
            <ScrollBar x:Name="PART_HorizontalScrollBar" AutomationProperties.AutomationId="HorizontalScrollBar"
                       Cursor="Arrow" Grid.Column="0" Maximum="{TemplateBinding ScrollViewer.ScrollableWidth}" Minimum="0"
                       Orientation="Horizontal" Grid.Row="1"
                       Visibility="{TemplateBinding ScrollViewer.ComputedHorizontalScrollBarVisibility}"
                       ViewportSize="{TemplateBinding ScrollViewer.ViewportWidth}"
                       Value="{Binding HorizontalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}"/>
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="ScrollBarLineButtonStyle" TargetType="{x:Type RepeatButton}">
    <Setter Property="FrameworkElement.OverridesDefaultStyle" Value="true"/>
    <Setter Property="Control.Background" Value="Transparent"/>
    <Setter Property="Control.Foreground" Value="{StaticResource Border}"/>
    <Setter Property="Control.BorderThickness" Value="0"/>
    <Setter Property="FrameworkElement.MinWidth" Value="0"/>
    <Setter Property="FrameworkElement.MinHeight" Value="0"/>
    <Setter Property="Control.IsTabStop" Value="false"/>
    <Setter Property="UIElement.Focusable" Value="false"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type RepeatButton}">
          <Border BorderBrush="{TemplateBinding Control.BorderBrush}"
                  BorderThickness="{TemplateBinding Control.BorderThickness}"
                  Background="{TemplateBinding Control.Background}"
                  Height="{TemplateBinding FrameworkElement.Height}" Width="{TemplateBinding FrameworkElement.Width}">
            <Path x:Name="Path" Fill="{TemplateBinding Control.Foreground}" HorizontalAlignment="Center"
                  VerticalAlignment="Center"
                  Data="{Binding Content, RelativeSource={RelativeSource TemplatedParent}}"/>
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="UIElement.IsMouseOver" Value="true">
              <Setter TargetName="Path" Value="{StaticResource Foreground}" Property="Shape.Fill"/>
            </Trigger>
            <Trigger Property="UIElement.IsEnabled" Value="false">
              <Setter Value="{StaticResource DisabledForeground}" Property="Control.Foreground"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="VerticalScrollBarPageButtonStyle" TargetType="{x:Type RepeatButton}">
    <Setter Property="FrameworkElement.OverridesDefaultStyle" Value="true"/>
    <Setter Property="Control.IsTabStop" Value="false"/>
    <Setter Property="UIElement.Focusable" Value="false"/>
    <Setter Property="FrameworkElement.MinWidth"
            Value="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}"/>
    <Setter Property="FrameworkElement.MinHeight"
            Value="{DynamicResource {x:Static SystemParameters.VerticalScrollBarButtonHeightKey}}"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type RepeatButton}">
          <Rectangle Fill="Transparent"/>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="ScrollBarThumb" TargetType="{x:Type Thumb}">
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Thumb}">
          <Border BorderBrush="Transparent" Background="{StaticResource Border}"/>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="HorizontalScrollBarPageButtonStyle" TargetType="{x:Type RepeatButton}">
    <Setter Property="FrameworkElement.OverridesDefaultStyle" Value="true"/>
    <Setter Property="Control.IsTabStop" Value="false"/>
    <Setter Property="UIElement.Focusable" Value="false"/>
    <Setter Property="FrameworkElement.MinHeight"
            Value="{DynamicResource {x:Static SystemParameters.HorizontalScrollBarHeightKey}}"/>
    <Setter Property="FrameworkElement.MinWidth"
            Value="{DynamicResource {x:Static SystemParameters.HorizontalScrollBarButtonWidthKey}}"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type RepeatButton}">
          <Rectangle Fill="Transparent"/>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style TargetType="{x:Type ScrollBar}">
    <Setter Property="Stylus.IsPressAndHoldEnabled" Value="false"/>
    <Setter Property="Stylus.IsFlicksEnabled" Value="false"/>
    <Setter Property="Control.Background" Value="{StaticResource HighlightBackground}"/>
    <Setter Property="Control.Foreground" Value="{StaticResource Border}"/>
    <Setter Property="Control.BorderThickness" Value="0"/>
    <Setter Property="FrameworkElement.Width"
            Value="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}"/>
    <Setter Property="FrameworkElement.MinWidth"
            Value="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ScrollBar}">
          <Grid Background="{TemplateBinding Control.Background}">
            <Grid.RowDefinitions>
              <RowDefinition MaxHeight="{DynamicResource {x:Static SystemParameters.VerticalScrollBarButtonHeightKey}}"/>
              <RowDefinition Height="0.00001*"/>
              <RowDefinition MaxHeight="{DynamicResource {x:Static SystemParameters.VerticalScrollBarButtonHeightKey}}"/>
            </Grid.RowDefinitions>
            <Viewbox Stretch="Fill">
              <RepeatButton Content="M 0 4 L 7 4 L 3.5 0 Z" Command="{x:Static ScrollBar.LineUpCommand}"
                            Height="{DynamicResource {x:Static SystemParameters.VerticalScrollBarButtonHeightKey}}"
                            MinWidth="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}"
                            Style="{StaticResource ScrollBarLineButtonStyle}"/>
            </Viewbox>
            <Rectangle Fill="Transparent" Grid.Row="1"/>
            <Track x:Name="PART_Track" IsDirectionReversed="true" Grid.Row="1">
              <Track.DecreaseRepeatButton>
                <RepeatButton Command="{x:Static ScrollBar.PageUpCommand}"
                              Style="{StaticResource VerticalScrollBarPageButtonStyle}"/>
              </Track.DecreaseRepeatButton>
              <Track.IncreaseRepeatButton>
                <RepeatButton Command="{x:Static ScrollBar.PageDownCommand}"
                              Style="{StaticResource VerticalScrollBarPageButtonStyle}"/>
              </Track.IncreaseRepeatButton>
              <Track.Thumb>
                <Thumb Style="{StaticResource ScrollBarThumb}" Margin="2,0,2,0"/>
              </Track.Thumb>
            </Track>
            <Viewbox Grid.Row="2" Stretch="Fill">
              <RepeatButton Content="M 0 0 L 3.5 4 L 7 0 Z" Command="{x:Static ScrollBar.LineDownCommand}"
                            Height="{DynamicResource {x:Static SystemParameters.VerticalScrollBarButtonHeightKey}}"
                            MinWidth="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}"
                            Style="{StaticResource ScrollBarLineButtonStyle}"/>
            </Viewbox>
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Style.Triggers>
      <Trigger Property="ScrollBar.Orientation" Value="Horizontal">
        <Setter Property="FrameworkElement.Width" Value="Auto"/>
        <Setter Property="FrameworkElement.MinWidth" Value="0"/>
        <Setter Property="FrameworkElement.Height"
                Value="{DynamicResource {x:Static SystemParameters.HorizontalScrollBarHeightKey}}"/>
        <Setter Property="FrameworkElement.MinHeight"
                Value="{DynamicResource {x:Static SystemParameters.HorizontalScrollBarHeightKey}}"/>
        <Setter Property="Control.Template">
          <Setter.Value>
            <ControlTemplate TargetType="{x:Type ScrollBar}">
              <Grid Background="{TemplateBinding Control.Background}">
                <Grid.ColumnDefinitions>
                  <ColumnDefinition MaxWidth="{DynamicResource {x:Static SystemParameters.HorizontalScrollBarButtonWidthKey}}"/>
                  <ColumnDefinition Width="0.00001*"/>
                  <ColumnDefinition MaxWidth="{DynamicResource {x:Static SystemParameters.HorizontalScrollBarButtonWidthKey}}"/>
                </Grid.ColumnDefinitions>
                <Viewbox Stretch="Fill">
                  <RepeatButton Content="M 0 4 L 4 8 L 4 0 Z" Command="{x:Static ScrollBar.LineLeftCommand}"
                                MinHeight="{DynamicResource {x:Static SystemParameters.HorizontalScrollBarHeightKey}}"
                                Style="{StaticResource ScrollBarLineButtonStyle}"
                                Width="{DynamicResource {x:Static SystemParameters.HorizontalScrollBarButtonWidthKey}}"/>
                </Viewbox>
                <Rectangle Fill="Transparent" Grid.Column="1"/>
                <Track x:Name="PART_Track" Grid.Column="1">
                  <Track.DecreaseRepeatButton>
                    <RepeatButton Command="{x:Static ScrollBar.PageLeftCommand}"
                                  Style="{StaticResource HorizontalScrollBarPageButtonStyle}"/>
                  </Track.DecreaseRepeatButton>
                  <Track.IncreaseRepeatButton>
                    <RepeatButton Command="{x:Static ScrollBar.PageRightCommand}"
                                  Style="{StaticResource HorizontalScrollBarPageButtonStyle}"/>
                  </Track.IncreaseRepeatButton>
                  <Track.Thumb>
                    <Thumb Style="{StaticResource ScrollBarThumb}" Margin="0,2,0,2"/>
                  </Track.Thumb>
                </Track>
                <Viewbox Grid.Column="2" Stretch="Fill">
                  <RepeatButton Content="M 0 0 L 0 8 L 4 4 Z" Command="{x:Static ScrollBar.LineRightCommand}"
                                MinHeight="{DynamicResource {x:Static SystemParameters.HorizontalScrollBarHeightKey}}"
                                Style="{StaticResource ScrollBarLineButtonStyle}"
                                Width="{DynamicResource {x:Static SystemParameters.HorizontalScrollBarButtonWidthKey}}"/>
                </Viewbox>
              </Grid>
            </ControlTemplate>
          </Setter.Value>
        </Setter>
      </Trigger>
    </Style.Triggers>
  </Style>
  <PopupAnimation x:Key="{x:Static SystemParameters.ComboBoxPopupAnimationKey}">None</PopupAnimation>
  <Style x:Key="ComboBoxFocusVisual">
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate>
          <Rectangle Margin="4,4,21,4" SnapsToDevicePixels="true" Stroke="{StaticResource Border}" StrokeThickness="1"
                     StrokeDashArray="1 2"/>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Geometry x:Key="DownArrowGeometry">
    M 0 0 L 3.5 4 L 7 0 Z
  </Geometry>
  <Style x:Key="ComboBoxTransparentButtonStyle" TargetType="{x:Type ToggleButton}">
    <Setter Property="FrameworkElement.MinWidth" Value="0"/>
    <Setter Property="FrameworkElement.MinHeight" Value="0"/>
    <Setter Property="FrameworkElement.Width" Value="Auto"/>
    <Setter Property="FrameworkElement.Height" Value="Auto"/>
    <Setter Property="Control.Background" Value="Transparent"/>
    <Setter Property="Control.Foreground" Value="{StaticResource Foreground}"/>
    <Setter Property="Control.BorderBrush" Value="{StaticResource Border}"/>
    <Setter Property="Control.BorderThickness" Value="1,0,0,0"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ToggleButton}">
          <DockPanel Background="{TemplateBinding Control.Background}" LastChildFill="false" SnapsToDevicePixels="true">
            <Border x:Name="Border" BorderBrush="{TemplateBinding Control.BorderBrush}"
                    BorderThickness="{TemplateBinding Control.BorderThickness}"
                    Background="{StaticResource ControlBackground}" DockPanel.Dock="Right"
                    Width="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}">
              <Path Data="{StaticResource DownArrowGeometry}" Fill="{TemplateBinding Control.Foreground}"
                    HorizontalAlignment="Center" VerticalAlignment="Center"/>
            </Border>
          </DockPanel>
          <ControlTemplate.Triggers>
            <Trigger Property="UIElement.IsMouseOver" Value="true">
              <Setter TargetName="Border" Value="{StaticResource HighlightBackground}" Property="Border.Background"/>
            </Trigger>
            <DataTrigger Value="true"
                         Binding="{Binding IsDropDownOpen, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ComboBox}}}">
              <Setter TargetName="Border" Value="{StaticResource HighlightBackground}" Property="Border.Background"/>
            </DataTrigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Style.Triggers>
      <Trigger Property="UIElement.IsEnabled" Value="false">
        <Setter Property="Control.Foreground" Value="{StaticResource DisabledForeground}"/>
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="ComboBoxEditableTextBox" TargetType="{x:Type TextBox}">
    <Setter Property="FrameworkElement.OverridesDefaultStyle" Value="true"/>
    <Setter Property="UIElement.AllowDrop" Value="true"/>
    <Setter Property="FrameworkElement.MinWidth" Value="0"/>
    <Setter Property="FrameworkElement.MinHeight" Value="0"/>
    <Setter Property="FrameworkElement.FocusVisualStyle" Value="{x:Null}"/>
    <Setter Property="ScrollViewer.PanningMode" Value="VerticalFirst"/>
    <Setter Property="Stylus.IsFlicksEnabled" Value="false"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type TextBox}">
          <ScrollViewer x:Name="PART_ContentHost" Background="Transparent" Focusable="false"
                        HorizontalScrollBarVisibility="Hidden" VerticalScrollBarVisibility="Hidden"/>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <ControlTemplate x:Key="ComboBoxEditableTemplate" TargetType="{x:Type ComboBox}">
    <Border BorderBrush="{TemplateBinding Control.BorderBrush}"
            BorderThickness="{TemplateBinding Control.BorderThickness}"
            Background="{TemplateBinding Control.Background}" SnapsToDevicePixels="true">
      <Grid>
        <Border x:Name="Border" BorderBrush="{StaticResource Border}" BorderThickness="2"
                Background="{TemplateBinding Control.Background}">
          <Popup x:Name="PART_Popup" AllowsTransparency="true" Focusable="false"
                 IsOpen="{TemplateBinding ComboBox.IsDropDownOpen}"
                 PopupAnimation="{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}"
                 Placement="Bottom">
            <Border x:Name="DropDownBorder" BorderBrush="{StaticResource Border}" BorderThickness="1"
                    Background="{StaticResource ControlBackground}"
                    MaxHeight="{TemplateBinding ComboBox.MaxDropDownHeight}"
                    MinWidth="{Binding ActualWidth, ElementName=Border}">
              <ScrollViewer x:Name="DropDownScrollViewer">
                <Grid RenderOptions.ClearTypeHint="Enabled">
                  <Canvas HorizontalAlignment="Left" Height="0" VerticalAlignment="Top" Width="0">
                    <Rectangle x:Name="OpaqueRect" Fill="{Binding Background, ElementName=DropDownBorder}"
                               Height="{Binding ActualHeight, ElementName=DropDownBorder}"
                               Width="{Binding ActualWidth, ElementName=DropDownBorder}"/>
                  </Canvas>
                  <ItemsPresenter x:Name="ItemsPresenter" KeyboardNavigation.DirectionalNavigation="Contained"
                                  SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"/>
                </Grid>
              </ScrollViewer>
            </Border>
          </Popup>
        </Border>
        <ToggleButton ClickMode="Press" Focusable="false" Margin="2" MinWidth="0" MinHeight="0"
                      Style="{StaticResource ComboBoxTransparentButtonStyle}" Width="Auto"
                      IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"/>
        <DockPanel Margin="2">
          <FrameworkElement DockPanel.Dock="Right"
                            Width="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}"/>
          <TextBox x:Name="PART_EditableTextBox"
                   HorizontalContentAlignment="{TemplateBinding Control.HorizontalContentAlignment}"
                   Margin="{TemplateBinding Control.Padding}" Style="{StaticResource ComboBoxEditableTextBox}"
                   VerticalContentAlignment="{TemplateBinding Control.VerticalContentAlignment}"
                   IsReadOnly="{Binding IsReadOnly, RelativeSource={RelativeSource TemplatedParent}}"/>
        </DockPanel>
      </Grid>
    </Border>
    <ControlTemplate.Triggers>
      <Trigger Property="ItemsControl.HasItems" Value="false">
        <Setter TargetName="DropDownBorder" Property="FrameworkElement.MinHeight" Value="95"/>
      </Trigger>
      <Trigger Property="UIElement.IsEnabled" Value="false">
        <Setter Value="{DynamicResource DisabledForeground}" Property="Control.Foreground"/>
        <Setter Value="{DynamicResource DisabledBackground}" Property="Control.Background"/>
      </Trigger>
      <Trigger Property="ItemsControl.IsGrouping" Value="true">
        <Setter Property="ScrollViewer.CanContentScroll" Value="false"/>
      </Trigger>
      <Trigger SourceName="DropDownScrollViewer" Property="ScrollViewer.CanContentScroll" Value="false">
        <Setter TargetName="OpaqueRect" Value="{Binding VerticalOffset, ElementName=DropDownScrollViewer}"
                Property="Canvas.Top"/>
        <Setter TargetName="OpaqueRect" Value="{Binding HorizontalOffset, ElementName=DropDownScrollViewer}"
                Property="Canvas.Left"/>
      </Trigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>
  <Style TargetType="{x:Type ComboBox}">
    <Setter Property="FrameworkElement.FocusVisualStyle" Value="{StaticResource ComboBoxFocusVisual}"/>
    <Setter Property="Control.Foreground" Value="{StaticResource Foreground}"/>
    <Setter Property="Control.Background" Value="{StaticResource ControlBackground}"/>
    <Setter Property="Control.BorderBrush" Value="{StaticResource Border}"/>
    <Setter Property="Control.BorderThickness" Value="1"/>
    <Setter Property="FrameworkElement.Margin" Value="0,0,0,0"/>
    <Setter Property="Control.Padding" Value="2,1"/>
    <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto"/>
    <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto"/>
    <Setter Property="ScrollViewer.CanContentScroll" Value="true"/>
    <Setter Property="ScrollViewer.PanningMode" Value="Both"/>
    <Setter Property="Stylus.IsFlicksEnabled" Value="false"/>
    <Setter Property="Control.VerticalContentAlignment" Value="Center"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ComboBox}">
          <Border x:Name="Border" BorderBrush="{TemplateBinding Control.BorderBrush}"
                  BorderThickness="{TemplateBinding Control.BorderThickness}"
                  Background="{TemplateBinding Control.Background}" SnapsToDevicePixels="true">
            <Grid>
              <Popup x:Name="PART_Popup" AllowsTransparency="true" Focusable="false"
                     IsOpen="{TemplateBinding ComboBox.IsDropDownOpen}"
                     PopupAnimation="{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}"
                     Placement="Bottom">
                <Border x:Name="DropDownBorder" BorderBrush="{StaticResource Border}" BorderThickness="1"
                        Background="{StaticResource ControlBackground}"
                        MaxHeight="{TemplateBinding ComboBox.MaxDropDownHeight}"
                        MinWidth="{Binding ActualWidth, ElementName=Border}">
                  <UIElement.Effect>
                    <DropShadowEffect BlurRadius="4" Opacity="0.8" ShadowDepth="1"/>
                  </UIElement.Effect>
                  <ScrollViewer x:Name="DropDownScrollViewer">
                    <Grid RenderOptions.ClearTypeHint="Enabled">
                      <Canvas HorizontalAlignment="Left" Height="0" VerticalAlignment="Top" Width="0">
                        <Rectangle x:Name="OpaqueRect" Fill="{Binding Background, ElementName=DropDownBorder}"
                                   Height="{Binding ActualHeight, ElementName=DropDownBorder}"
                                   Width="{Binding ActualWidth, ElementName=DropDownBorder}"/>
                      </Canvas>
                      <ItemsPresenter x:Name="ItemsPresenter" KeyboardNavigation.DirectionalNavigation="Contained"
                                      SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"/>
                    </Grid>
                  </ScrollViewer>
                </Border>
              </Popup>
              <DockPanel Margin="2">
                <FrameworkElement DockPanel.Dock="Right"
                                  Width="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}"/>
                <Border Margin="{TemplateBinding Control.Padding}">
                  <ContentPresenter ContentTemplate="{TemplateBinding ComboBox.SelectionBoxItemTemplate}"
                                    ContentTemplateSelector="{TemplateBinding ItemsControl.ItemTemplateSelector}"
                                    Content="{TemplateBinding ComboBox.SelectionBoxItem}"
                                    ContentStringFormat="{TemplateBinding ComboBox.SelectionBoxItemStringFormat}"
                                    HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}" Margin="1,1,1,1"
                                    SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"
                                    VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}"/>
                </Border>
              </DockPanel>
              <ToggleButton ClickMode="Press" Focusable="false" Style="{StaticResource ComboBoxTransparentButtonStyle}"
                            Width="Auto"
                            IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"/>
            </Grid>
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="ItemsControl.HasItems" Value="false">
              <Setter TargetName="DropDownBorder" Property="FrameworkElement.MinHeight" Value="95"/>
            </Trigger>
            <Trigger Property="UIElement.IsEnabled" Value="false">
              <Setter Value="{DynamicResource DisabledForeground}" Property="Control.Foreground"/>
              <Setter Value="{DynamicResource DisabledBackground}" Property="Control.Background"/>
            </Trigger>
            <Trigger Property="ItemsControl.IsGrouping" Value="true">
              <Setter Property="ScrollViewer.CanContentScroll" Value="false"/>
            </Trigger>
            <Trigger SourceName="DropDownScrollViewer" Property="ScrollViewer.CanContentScroll" Value="false">
              <Setter TargetName="OpaqueRect" Value="{Binding VerticalOffset, ElementName=DropDownScrollViewer}"
                      Property="Canvas.Top"/>
              <Setter TargetName="OpaqueRect" Value="{Binding HorizontalOffset, ElementName=DropDownScrollViewer}"
                      Property="Canvas.Left"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Style.Triggers>
      <Trigger Property="ComboBox.IsEditable" Value="true">
        <Setter Property="Control.IsTabStop" Value="false"/>
        <Setter Property="Control.Padding" Value="1"/>
        <Setter Property="Control.Template" Value="{StaticResource ComboBoxEditableTemplate}"/>
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style TargetType="{x:Type ComboBoxItem}">
    <Setter Property="FrameworkElement.MinHeight" Value="20"/>
    <Setter Property="FrameworkElement.FocusVisualStyle" Value="{x:Null}"/>
    <Setter Property="Control.Padding" Value="4,2"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ComboBoxItem}">
          <Border x:Name="ListBoxItemRoot" BorderBrush="{TemplateBinding Control.BorderBrush}"
                  BorderThickness="{TemplateBinding Control.BorderThickness}"
                  Background="{TemplateBinding Control.Background}">
            <ContentPresenter ContentTemplate="{TemplateBinding ContentControl.ContentTemplate}"
                              Content="{TemplateBinding ContentControl.Content}"
                              HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}"
                              Margin="{TemplateBinding Control.Padding}"
                              VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}"/>
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Style.Triggers>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="UIElement.IsMouseOver" Value="true"/>
          <Condition Property="ListBoxItem.IsSelected" Value="false"/>
        </MultiTrigger.Conditions>
        <Setter Property="Control.Background" Value="{StaticResource HighlightBackground}"/>
      </MultiTrigger>
      <MultiDataTrigger>
        <MultiDataTrigger.Conditions>
          <Condition Binding="{Binding IsSelected, RelativeSource={RelativeSource Self}}" Value="True"/>
          <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type ComboBox}}}"
                     Value="True"/>
        </MultiDataTrigger.Conditions>
        <Setter Property="Control.Background" Value="{StaticResource HighlightBackground}"/>
      </MultiDataTrigger>
      <MultiDataTrigger>
        <MultiDataTrigger.Conditions>
          <Condition Binding="{Binding IsFocused, RelativeSource={RelativeSource Self}}" Value="True"/>
          <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type ComboBox}}}"
                     Value="False"/>
        </MultiDataTrigger.Conditions>
        <Setter Property="Control.Background" Value="{StaticResource HighlightBackground}"/>
      </MultiDataTrigger>
      <Trigger Property="UIElement.IsEnabled" Value="false">
        <Setter Property="Control.Foreground" Value="{StaticResource DisabledForeground}"/>
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style TargetType="{x:Type ProgressBar}">
    <Setter Property="Control.Background" Value="{StaticResource ControlBackground}"/>
    <Setter Property="Control.Foreground" Value="{StaticResource Foreground}"/>
    <Setter Property="Control.BorderBrush" Value="{StaticResource Border}"/>
    <Setter Property="Control.BorderThickness" Value="1"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ProgressBar}">
          <Grid MinHeight="14" MinWidth="200" Background="{TemplateBinding Control.Background}">
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="CommonStates">
                <VisualState x:Name="Determinate"/>
                <VisualState x:Name="Indeterminate">
                  <Storyboard>
                    <ObjectAnimationUsingKeyFrames Duration="0" Storyboard.TargetName="PART_Indicator" Storyboard.TargetProperty="Background">
                      <DiscreteObjectKeyFrame KeyTime="0">
                        <ObjectKeyFrame.Value>
                          <SolidColorBrush Color="Transparent"/>
                        </ObjectKeyFrame.Value>
                      </DiscreteObjectKeyFrame>
                    </ObjectAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Duration="0" Storyboard.TargetName="Animation" Storyboard.TargetProperty="Visibility">
                      <DiscreteObjectKeyFrame KeyTime="0">
                        <ObjectKeyFrame.Value>
                          <Visibility>Visible</Visibility>
                        </ObjectKeyFrame.Value>
                      </DiscreteObjectKeyFrame>
                    </ObjectAnimationUsingKeyFrames>
                    <DoubleAnimation Storyboard.TargetName="animTranslate" Storyboard.TargetProperty="X" From="0" To="50"
                                     Duration="0:0:1" RepeatBehavior="Forever"/>
                  </Storyboard>
                </VisualState>
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <Border x:Name="PART_Track" BorderThickness="{TemplateBinding Control.BorderThickness}"
                    BorderBrush="{TemplateBinding Control.BorderBrush}"/>
            <Border x:Name="PART_Indicator" HorizontalAlignment="Left"
                    Background="{TemplateBinding Control.Foreground}" Margin="3">
              <Border x:Name="Animation" Visibility="Hidden">
                <Border.Background>
                  <DrawingBrush TileMode="Tile" Viewport="0,0,25,25" ViewportUnits="Absolute">
                    <Brush.Transform>
                      <TranslateTransform x:Name="animTranslate"/>
                    </Brush.Transform>
                    <DrawingBrush.Drawing>
                      <GeometryDrawing>
                        <GeometryDrawing.Brush>
                          <LinearGradientBrush SpreadMethod="Repeat" StartPoint="0,0" EndPoint="1,1">
                            <Brush.RelativeTransform>
                              <ScaleTransform ScaleX="0.5" ScaleY="0.5"/>
                            </Brush.RelativeTransform>
                            <GradientStop Offset="0" Color="Transparent"/>
                            <GradientStop Offset="0.5" Color="Transparent"/>
                            <GradientStop Offset="0.5"
                                          Color="{Binding Foreground, Converter={x:Static local:BrushToColorConverter.Instance}, RelativeSource={RelativeSource Mode=TemplatedParent}}"/>
                            <GradientStop Offset="1"
                                          Color="{Binding Foreground, Converter={x:Static local:BrushToColorConverter.Instance}, RelativeSource={RelativeSource Mode=TemplatedParent}}"/>
                          </LinearGradientBrush>
                        </GeometryDrawing.Brush>
                        <GeometryDrawing.Geometry>
                          <RectangleGeometry Rect="0,0,10,10"/>
                        </GeometryDrawing.Geometry>
                      </GeometryDrawing>
                    </DrawingBrush.Drawing>
                  </DrawingBrush>
                </Border.Background>
              </Border>
            </Border>
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style TargetType="{x:Type Hyperlink}">
    <Style.Triggers>
      <Trigger Property="ContentElement.IsMouseOver" Value="true">
        <Setter Property="TextBlock.TextDecorations" Value="Underline"/>
      </Trigger>
    </Style.Triggers>
    <Setter Property="TextElement.Foreground" Value="{StaticResource Foreground}"/>
    <Setter Property="TextBlock.TextDecorations" Value="{x:Null}"/>
  </Style>
</ResourceDictionary>